<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/local-optimum-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/local-optimum-blog/" rel="alternate" type="text/html" /><updated>2021-08-28T22:49:06+01:00</updated><id>http://localhost:4000/local-optimum-blog/feed.xml</id><title type="html">local-optimum-blog</title><subtitle>Free software, free markets.</subtitle><entry><title type="html">The Invisible Tax: Python Project #1</title><link href="http://localhost:4000/local-optimum-blog/invisibletaxproject/2021/08/28/invisible-tax-project-part-1.html" rel="alternate" type="text/html" title="The Invisible Tax: Python Project #1" /><published>2021-08-28T21:20:23+01:00</published><updated>2021-08-28T21:20:23+01:00</updated><id>http://localhost:4000/local-optimum-blog/invisibletaxproject/2021/08/28/invisible-tax-project-part-1</id><content type="html" xml:base="http://localhost:4000/local-optimum-blog/invisibletaxproject/2021/08/28/invisible-tax-project-part-1.html">&lt;blockquote&gt;
  &lt;h2 id=&quot;the-lesson-is-clear-inflation-devalues-us-all&quot;&gt;&lt;em&gt;“The lesson is clear, inflation devalues us all.”&lt;/em&gt;&lt;/h2&gt;
  &lt;p&gt;Margaret Thatcher&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t forget to check out &lt;a href=&quot;https://local-optimum.github.io/local-optimum-blog/invisibletaxproject/2021/08/02/invisible-tax-project-part-0.html&quot;&gt;Part #0&lt;/a&gt; for a recap of my motivations.&lt;/p&gt;
&lt;h2 id=&quot;mapping-the-problem&quot;&gt;Mapping the Problem&lt;/h2&gt;

&lt;p&gt;My first step was to map out the different steps of the process and determine how this would structure my code. I wanted to generate self contained modules that could be implemented and tested independently.&lt;/p&gt;

&lt;p&gt;The structure I settled on is detailed below. It involves 4 main elements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Taking an input of the user’s transaction history (desposit amounts &amp;amp; dates) as a baseline to model the data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tailoring an API based on the date range provided by the user and using it to build a query to a Consumer Price Index API. I chose the &lt;a href=&quot;https://stats.oecd.org/Index.aspx?DataSetCode=PRICES_CPI&quot;&gt;OECD.stat&lt;/a&gt; website due to its felxibility. whilst initially I will only work with UK data I wanted to make it simple to extend this functionality at a later date.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The user input and inflation statistics would then be converted into one master dataframe that applied the CPI stats to the user’s inputs, tailoring the impact of inflation for their specific case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally we would want to present this information in a visually appealling and informative manner, as well as giving them the option to export the raw data themselves for further analysis&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/local-optimum-blog/assets/images/inf-program-map.jpeg&quot; alt=&quot;image-title-here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of the above would then be called via a main.py wrapper with helpful explanatory text to the user!&lt;/p&gt;

&lt;h2 id=&quot;module-1-user-input&quot;&gt;Module 1: User Input&lt;/h2&gt;

&lt;p&gt;My initial attempt created a dictionary to take user inputs prompting them to create {date: deposit amount} pairs, however during testing I found it extremely time consuming to enter each desposit individually. There are already a large number of &lt;a href=&quot;https://www.thisismoney.co.uk/money/bills/article-1633409/Historic-inflation-calculator-value-money-changed-1900.html&quot;&gt;sites&lt;/a&gt; that allow users to model the impact of inflation on single transactions, therefore the USP of this project should be that it allows users to map multiple transactions across a range of dates.&lt;/p&gt;

&lt;p&gt;After some research into Standard Input, I rewrote the code as follows.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#import user transactions and convert to a dataframe
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please submit your deposits/withdrawls in the following format:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YYYY-MM XXXX&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YYYY-MM XXXX&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Use Ctril+d to submit your data without entering a blank line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;userdepositraw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deposits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdepositraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;depositsdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deposits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'year_month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'deposits'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;depositsdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'deposits'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depositsdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'deposits'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;depositsdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'year_month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depositsdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'year_month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;netdepositsdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depositsdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'year_month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Deposits submitted, thank you.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Input not accepted, please try again.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#find the earliest date to query inflation data from
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;earliest_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netdepositsdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'year_month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earliest_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%Y-%m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By reading in several lines in a standardised format I was able to allow the user to paste large numbers of deposits at once, input multiple deposits on a single date and immediately map the result to a dataframe, making the future integration with the inflation API result much easier.&lt;/p&gt;

&lt;p&gt;As you can see I’m relying on any errors generated in the manipulation of the input to ensure the user input is in the correct format before proceeding. I’m sure there are a number of edge cases that could slip through however.&lt;/p&gt;

&lt;p&gt;Finally, I used the dataframe to find the earliest deposit date which would act as an input for Module 2: The API Call…&lt;/p&gt;</content><author><name></name></author><category term="InvisibleTaxProject" /><category term="inflation" /><category term="python" /><summary type="html">“The lesson is clear, inflation devalues us all.” Margaret Thatcher</summary></entry><entry><title type="html">The Invisible Tax: Python Project #0</title><link href="http://localhost:4000/local-optimum-blog/invisibletaxproject/2021/08/02/invisible-tax-project-part-0.html" rel="alternate" type="text/html" title="The Invisible Tax: Python Project #0" /><published>2021-08-02T18:20:23+01:00</published><updated>2021-08-02T18:20:23+01:00</updated><id>http://localhost:4000/local-optimum-blog/invisibletaxproject/2021/08/02/invisible-tax-project-part-0</id><content type="html" xml:base="http://localhost:4000/local-optimum-blog/invisibletaxproject/2021/08/02/invisible-tax-project-part-0.html">&lt;blockquote&gt;
  &lt;h2 id=&quot;haha-money-printer-go-brrrrr&quot;&gt;&lt;em&gt;“haha money printer go brrrrr”&lt;/em&gt;&lt;/h2&gt;
  &lt;p&gt;@femalelandlords (account suspended)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whilst governments all over the world continue to &lt;a href=&quot;https://www.independent.co.uk/news/business/news/bank-england-money-printing-coronavirus-b1610167.html&quot;&gt;print&lt;/a&gt;, &lt;a href=&quot;https://www.cityam.com/almost-a-fifth-of-all-us-dollars-were-created-this-year/&quot;&gt;money&lt;/a&gt; to pay down the &lt;a href=&quot;https://www.bbc.co.uk/news/business-53104734&quot;&gt;debt&lt;/a&gt; created by their response to the Covid-19 pandemic, I began to realise just how difficult it was to keep track of this increasing cost of living in my personal finances.&lt;/p&gt;

&lt;p&gt;My ISA app tells me the percentage return on my investments over the last few years  but not the difference in that percentage increase from the percentage loss the pound has taken in the meantime.&lt;/p&gt;

&lt;p&gt;I can see the total amount of cash I have in my bank account, but not whether a recent pay rise has increased my standard of living or merely maintained it.&lt;/p&gt;

&lt;p&gt;Should I even be holding cash at all or paying off credit cards with low enough interest rates that my debt shrinks in line with inflation?&lt;/p&gt;

&lt;p&gt;These don’t feel like uncommon concerns for most people and they feel like increasingly pressing concerns in the current financial climate.&lt;/p&gt;

&lt;p&gt;The information we need to inform these decisions is out there but it is often:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Poorly or misleadingly presented&lt;/strong&gt; - rising and falling positive inflation is still compounding the cost of living.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Too theoretical to be useful&lt;/strong&gt; - I can compare single amounts of money to current amounts, but not multiple deposits over multiple years.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Heavily cherry picked&lt;/strong&gt; - A consumer price index that &lt;em&gt;doesn’t&lt;/em&gt; factor in house prices is hiding key information about modern citizens’ ability to accumulate capital.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To that end I’m developing the &lt;a href=&quot;https://github.com/local-optimum/invisible-tax-calculator&quot;&gt;Invisible Tax Calculator&lt;/a&gt;, a tool that is designed to form the basis of what would ideally become a genuinely practical wealth analysis tool.&lt;/p&gt;

&lt;h2 id=&quot;the-proof-of-concept&quot;&gt;The Proof of Concept&lt;/h2&gt;

&lt;p&gt;At its core &lt;strong&gt;The Invisible Tax Calculator&lt;/strong&gt; is designed to address points 1. and 2. of the above. It should enable individuals to submit a table of GBP deposits and produce some informative graphs and statistics about the impact of inflation on those savings based on current UK CPI.&lt;/p&gt;

&lt;p&gt;These results can then be used to compare against the actual performance of that cash when invested to understand how much return is required to outpace inflation.&lt;/p&gt;

&lt;p&gt;Once the above has been achieved, I intend to expand the functionality of the program with additional measures such as house prices, gold prices and stock market returns to help mitigate what was mentioned in point 3.&lt;/p&gt;

&lt;p&gt;Finally I want to build a front end site that enables users to model their finances with a much greater degree of flexibility and intuitiveness.&lt;/p&gt;

&lt;h2 id=&quot;learning-python&quot;&gt;Learning Python&lt;/h2&gt;

&lt;p&gt;It is worth noting that this project will be my first truly independent effort since I began learning Python. I will no doubt create inelegant solutions and make some mistakes along the way and I would welcome feedback or comments from anyone who tests out the current work in progress.&lt;/p&gt;

&lt;p&gt;I felt like this would be an interesting starting project as it combines a few key areas I want to develop, namely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dataframe creation and management&lt;/li&gt;
  &lt;li&gt;Parsing APIs&lt;/li&gt;
  &lt;li&gt;Data visualisation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my next post I’ll describe the initial structure of the program as well as sharing my data sources and calculations.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><author><name></name></author><category term="InvisibleTaxProject" /><category term="inflation" /><category term="python" /><summary type="html">“haha money printer go brrrrr” @femalelandlords (account suspended)</summary></entry><entry><title type="html">Dollar-Cost Averaging Crypto: 1-Day Hackathon Project</title><link href="http://localhost:4000/local-optimum-blog/hackathons/2021/08/02/dollar-cost-avg-hackathon.html" rel="alternate" type="text/html" title="Dollar-Cost Averaging Crypto: 1-Day Hackathon Project" /><published>2021-08-02T18:20:23+01:00</published><updated>2021-08-02T18:20:23+01:00</updated><id>http://localhost:4000/local-optimum-blog/hackathons/2021/08/02/dollar-cost-avg-hackathon</id><content type="html" xml:base="http://localhost:4000/local-optimum-blog/hackathons/2021/08/02/dollar-cost-avg-hackathon.html">&lt;blockquote&gt;
  &lt;h2 id=&quot;btc--eth-do-seem-high-lol&quot;&gt;&lt;em&gt;“BTC &amp;amp; ETH do seem high lol”&lt;/em&gt;&lt;/h2&gt;
  &lt;p&gt;&lt;a href=&quot;https://twitter.com/elonmusk/status/1363021091086561285&quot;&gt;@elonmusk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As crypto markets start to move upwards once more I’ve been reading up on the concept of &lt;a href=&quot;https://www.vanguardinvestor.co.uk/articles/latest-thoughts/how-it-works/what-is-pound-cost-averaging&quot;&gt;dollar-cost averaging&lt;/a&gt;. The idea of removing emotion from investment and damping some of crypto’s wilder oscillations is a tempting idea, even if studies show that with &lt;a href=&quot;https://www.cnbc.com/2021/08/12/which-investment-strategy-is-better-lump-sum-or-dollar-cost-averaging.html&quot;&gt;reduced risk comes reduced gains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I pitched &lt;a href=&quot;https://mintyfresh.me/&quot;&gt;MintyFresh&lt;/a&gt; on the idea of modelling this strategy ourselves over a one day hackathon.&lt;/p&gt;

&lt;p&gt;He agreed.&lt;/p&gt;
&lt;h3 id=&quot;the-back-end-local-optimum&quot;&gt;The Back End (local-optimum)&lt;/h3&gt;

&lt;p&gt;My role was to design and serve a new API that delivered a table of deposits and running portfolio values within a specified time period across a range of crypto and fiat currencies. I also decided to include a benchmark running total that modelled the user investing their total funds on day zero for comparison.&lt;/p&gt;

&lt;p&gt;The code can be found &lt;a href=&quot;https://github.com/local-optimum/dollar-cost-avg-widget&quot;&gt;here&lt;/a&gt;, but the &lt;strong&gt;tl;dr&lt;/strong&gt; is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;costAverageFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;function that takes the above strings as inputs, 
    converts them into an API query to coingecko
    then creates a dataframe of dollar cost averaging 
    returns vs a single bulk deposit&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output of this function is then wrapped in a flask app, the dataframe is jsonify’d and the resulting API is hosted on &lt;a href=&quot;https://dca-crypto.herokuapp.com/&quot;&gt;heroku&lt;/a&gt;. If you want to call the API yourself, simply append the following to the linked address&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/dca/query?coin=INPUT&amp;amp;deposit=INPUT&amp;amp;currency=INPUT&amp;amp;frequency=INPUT&amp;amp;startdate=INPUT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://dca-crypto.herokuapp.com/dca/query?coin=bitcoin&amp;amp;deposit=100&amp;amp;currency=usd&amp;amp;frequency=1&amp;amp;startdate=2021-01-05&quot;&gt;Example here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-front-end-mintyfresh&quot;&gt;The Front End (MintyFresh)&lt;/h3&gt;

&lt;p&gt;As the interface designer, MintyFresh built a web app in JavaScript that allowed the user to choose the parameters for my &lt;strong&gt;costAverageFunc&lt;/strong&gt;, call the API and return a simple Plotly visualisation of the returns over time. Have a go below!&lt;/p&gt;

&lt;iframe src=&quot;https://mintyfresh.me/dca-crypto/&quot; width=&quot;600&quot; height=&quot;800&quot; style=&quot;border: none;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
You can also find his code &lt;a href=&quot;https://github.com/MintyFresh-2/dca-crypto&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Crypto in general has had such an astronomical rise in value over the last few years that any modelling that goes back more than 18 months generates significantly lower returns compared to going all in early.&lt;/p&gt;

&lt;p&gt;However there are situations where dollar-cost averaging does come out on top, intuitively this is true when starting the model at one of the peaks (eg mid March 2021 where DCA actually generates a profit versus a 20% loss for those that buy only at the peak). In general losses are reduced as the market dips and the investor is getting more crypto for their money to compensate.&lt;/p&gt;

&lt;p&gt;We must also consider that there are many situations where the recreational investor is only able to put money in periodically rather than all at once. In this case it may be reassuring to know that buying regularly rather than saving up for a “dip” may be a better strategy (the classic “time in the market is better than timing the market”), however I’m not confident our current visualisations can prove that assertion.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;This project was my first experience creating APIs and using Flask so I’m sure there are some more elegant alternatives to my approach. However the real stretch goals for this project are in the visualisations, not just in opportunities to tidy up formatting but in how to clearly define and answer useful questions around DCA.&lt;/p&gt;

&lt;p&gt;Comparing regular investment vs an initial bulk buy was the best we could think of within the time constraints. Going forward I would be interested in allowing users to hand pick buy-in points to simulate saving up to time the market or simply model their previous investment decisions.&lt;/p&gt;

&lt;p&gt;If you have any ideas for visualisations or further expansion of this work please leave a comment on &lt;a href=&quot;https://github.com/local-optimum/dollar-cost-avg-widget&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Hackathons" /><category term="crypto" /><category term="python" /><category term="flask" /><summary type="html">“BTC &amp;amp; ETH do seem high lol” @elonmusk</summary></entry></feed>